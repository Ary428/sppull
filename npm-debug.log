0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Users\\andrew.koltyakov\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@3.10.2
3 info using node@v6.9.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: 'D:\\Projects\\GitHub\\sppull',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache\sppull\1.1.1\package.tgz not in flight; packing
9 verbose correctMkdir C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
10 info lifecycle sppull@1.1.1~prepublish: sppull@1.1.1
11 silly lifecycle sppull@1.1.1~prepublish: no script for prepublish, continuing
12 verbose tar pack [ 'C:\\Users\\andrew.koltyakov\\AppData\\Roaming\\npm-cache\\sppull\\1.1.1\\package.tgz',
12 verbose tar pack   'D:\\Projects\\GitHub\\sppull' ]
13 verbose tarball C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache\sppull\1.1.1\package.tgz
14 verbose folder D:\Projects\GitHub\sppull
15 verbose addLocalTarball adding from inside cache C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache\sppull\1.1.1\package.tgz
16 verbose correctMkdir C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
17 silly cache afterAdd sppull@1.1.1
18 verbose afterAdd C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache\sppull\1.1.1\package\package.json not in flight; writing
19 verbose correctMkdir C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
20 verbose afterAdd C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache\sppull\1.1.1\package\package.json written
21 silly publish { name: 'sppull',
21 silly publish   description: 'Download files from SharePoint document libraries using Node.js without hassles',
21 silly publish   version: '1.1.1',
21 silly publish   author:
21 silly publish    { name: 'Andrew Koltyakov',
21 silly publish      email: 'andrew.koltyakov@gmail.com' },
21 silly publish   main: './lib/src/index.js',
21 silly publish   engines: { node: '>=4.0.0' },
21 silly publish   scripts:
21 silly publish    { build: 'npm install',
21 silly publish      test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   bugs: { url: 'https://github.com/koltyakov/sppull/issues' },
21 silly publish   keywords: [ 'sharepoint', 'download', 'documents', 'rest', 'sync' ],
21 silly publish   repository: { type: 'git', url: 'git://github.com/koltyakov/sppull.git' },
21 silly publish   license: 'MIT',
21 silly publish   dependencies:
21 silly publish    { bluebird: '^3.4.6',
21 silly publish      colors: '^1.1.2',
21 silly publish      mkdirp: '^0.5.1',
21 silly publish      prompt: '^1.0.0',
21 silly publish      readline: '^1.3.0',
21 silly publish      'sp-request': '^2.0.3' },
21 silly publish   devDependencies: { cpass: '^1.0.2', prompt: '^1.0.0', typings: '^2.0.0' },
21 silly publish   readme: '# SPPull - simple client to pull and download files from SharePoint\r\n\r\n[![NPM](https://nodei.co/npm/sppull.png?mini=true&downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/sppull/)\r\n\r\n[![npm version](https://badge.fury.io/js/sppull.svg)](https://badge.fury.io/js/sppull)\r\n[![Downloads](https://img.shields.io/npm/dm/sppull.svg)](https://www.npmjs.com/package/sppull)\r\n\r\nNode.js module for downloading files from SharePoint document libraries.\r\n\r\n## Supported SharePoint versions:\r\n- SharePoint Online\r\n- SharePoint 2013\r\n- SharePoint 2016\r\n\r\n## How to use:\r\n\r\n### Install:\r\n```bash\r\nnpm install sppull --save-dev\r\n```\r\n\r\n### Demo:\r\n![How it works](http://koltyakov.ru/images/sppull-demo.gif)\r\n\r\n### Usage:\r\n```javascript\r\nvar sppull = require("sppull").sppull;\r\n\r\nvar context = {/*...*/};\r\nvar options = {/*...*/};\r\n\r\nsppull(context, options)\r\n    .then(successHandler)\r\n    .catch(errorHandler);\r\n```\r\n#### Arguments:\r\n\r\n##### Context:\r\n- `siteUrl` - SharePoint site (SPWeb) url [string, required]\r\n- `username` - user name for SP authentication [string, optional in case of some auth methods]\r\n- `password` - password [string, optional in case of some auth methods]\r\n\r\n**Additional authentication options:**\r\n\r\nSince communication module (sp-request), which is used in sppull, had received additional SharePoint authentication methods, they are also supported in sppull.\r\n\r\n- SharePoint On-Premise (Add-In permissions):\r\n    - `clientId`\r\n    - `issuerId`\r\n    - `realm`\r\n    - `rsaPrivateKeyPath`\r\n    - `shaThumbprint`\r\n- SharePoint On-Premise (NTLM handshake - more commonly used scenario):\r\n    - `username` - username without domain\r\n    - `password`\r\n    - `domain` / `workstation`\r\n- SharePoint Online (Add-In permissions):\r\n    - `clientId`\r\n    - `clientSecret`\r\n- SharePoint Online (SAML based with credentials - more commonly used scenario):\r\n    - `username` - user name for SP authentication [string, required]\r\n    - `password` - password [string, required]\r\n- ADFS user credantials:\r\n    - `username`\r\n    - `password`\r\n    - `relyingParty`\r\n    - `adfsUrl`\r\n\r\nFor more information please check node-sp-auth [credential options](https://github.com/s-KaiNet/node-sp-auth#params) and [wiki pages](https://github.com/s-KaiNet/node-sp-auth/wiki).\r\n\r\n##### Options:\r\n- `spRootFolder` - root folder in SharePoint to pull from [string, required]\r\n- `dlRootFolder` - local root folder where files and folders will be saved to [string, optional, default: `./Downloads`]\r\n- `spBaseFolder` - base folder path which is omitted then saving files locally [string, optional, default: equals to spRootFolder]\r\n- `recursive` - to pull all files and folders recursively [boolean, optional, default: `true`]\r\n- `ignoreEmptyFolders` - to ignore local creation of SharePoint empty folders [boolean, optional, default: `true`]\r\n- `foderStructureOnly` - to ignore files, recreate only folders\' structure [boolean, optional, default: `false`]\r\n- `strictObjects` - array of files and folders relative paths within the `spRootFolder` to proceed explicitly, [array of strings, optional]\r\n- `camlCondition` - SharePoint CAML conditions to use [string, optional]\r\n- `spDocLibUrl` - SharePoint document library URL [string, mandatory with `camlCondition`]\r\n- `metaFields` - array of internal field names to request along with the files [array of strings, optional]\r\n- `createEmptyFolders` - to create empty folders along with documents download task [boolean, optional, default: `true`]\r\n- `muteConsole` - to mute console messages during transport queries to SharePoint API [boolean, optional, default: `false`]\r\n\r\n#### Overloads / cases:\r\n- All files with folder structure from spRootFolder\r\n- Files from spRootFolder folder, first hierarchy level only\r\n- Folders structure from spRootFolder without files\r\n- Files based on array of paths provided strictly [works with array of files only right now]\r\n- Files based on CAML query conditions\r\n- Pull for documents metadata to use it in callback\'s custom logic\r\n\r\nUse case scenarios can be found on the [Scenarios](https://github.com/koltyakov/sppull/tree/master/docs/Scenarios.md) page. This page suggests combinations of options which are optimal for certain use cases.\r\n\r\n#### successHandler\r\nCallback gets called upon successful files download.\r\n\r\n#### errorHandler\r\nCallback gets executed in case of exception inside `sppull`. Accepts error object as first argument for callback.\r\n\r\n## Samples\r\nRefer to the [Scenarios](https://github.com/koltyakov/sppull/tree/master/docs/Scenarios.md) page for suggested options combinations available with `sppull`.\r\n\r\n#### Basic usage:\r\n```javascript\r\nvar sppull = require("sppull").sppull;\r\n\r\nvar context = {\r\n    siteUrl: "http://contoso.sharepoint.com/subsite",\r\n    username: "user@contoso.com",\r\n    password: "_Password_"\r\n};\r\n\r\nvar options = {\r\n    spRootFolder: "Shared%20Documents/Contracts",\r\n    dlRootFolder: "./Downloads/Contracts"\r\n};\r\n\r\n/* \r\n * All files will be downloaded from http://contoso.sharepoint.com/subsite/Shared%20Documents/Contracts folder \r\n * to __dirname + /Downloads/Contracts folder.\r\n * Folders structure will remain original as it is in SharePoint\'s target folder.\r\n*/\r\nsppull(context, options)\r\n    .then(function(downloadResults) {\r\n        console.log("Files are downloaded");\r\n        console.log("For more, please check the results", JSON.stringify(downloadResults));\r\n    })\r\n    .catch(function(err) {\r\n        console.log("Core error has happened", err);\r\n    });\r\n```\r\n\r\n### Passwords storage\r\n\r\nTo eliminate any local password storing if preferable to use any two-way hashing technique, like [cpass](https://github.com/koltyakov/cpass).\r\n\r\n## Inspiration and references\r\n\r\nThis project was inspired by [spsave](https://github.com/s-KaiNet/spsave) by [Sergei Sergeev](https://github.com/s-KaiNet) and [gulp-spsync](https://github.com/wictorwilen/gulp-spsync) by [Wictor Wil√©n](https://github.com/wictorwilen) projects.\r\n\r\nSPPull depends heavily on [sp-request](https://github.com/s-KaiNet/sp-request) module and use it to send REST queries to SharePoint.',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '96ff528f779fb429be9ccea31c3af78a68175d79',
21 silly publish   homepage: 'https://github.com/koltyakov/sppull#readme',
21 silly publish   _id: 'sppull@1.1.1',
21 silly publish   _shasum: '8aeee6b92ec24d7861d13d8dfc06e0f15fd44e37',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name sppull
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'sppull',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'sppull',
26 silly mapToRegistry   name: 'sppull',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/sppull
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache\sppull\1.1.1\package.tgz
30 verbose request uri https://registry.npmjs.org/sppull
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 14:42:59
33 verbose request using bearer token for auth
34 verbose request id d2b25d60f43ee59d
35 http request PUT https://registry.npmjs.org/sppull
36 http 403 https://registry.npmjs.org/sppull
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Thu, 01 Dec 2016 11:45:28 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-ams4138-AMS',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1480592726.686470,VS0,VE1529',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating C:\Users\andrew.koltyakov\AppData\Roaming\npm-cache\registry.npmjs.org\sppull on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 1.1.1." : sppull
40 verbose stack     at makeError (C:\Users\andrew.koltyakov\AppData\Roaming\npm\node_modules\npm\node_modules\npm-registry-client\lib\request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (C:\Users\andrew.koltyakov\AppData\Roaming\npm\node_modules\npm\node_modules\npm-registry-client\lib\request.js:252:14)
40 verbose stack     at Request._callback (C:\Users\andrew.koltyakov\AppData\Roaming\npm\node_modules\npm\node_modules\npm-registry-client\lib\request.js:172:14)
40 verbose stack     at Request.self.callback (C:\Users\andrew.koltyakov\AppData\Roaming\npm\node_modules\npm\node_modules\request\request.js:200:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (C:\Users\andrew.koltyakov\AppData\Roaming\npm\node_modules\npm\node_modules\request\request.js:1067:10)
40 verbose stack     at emitOne (events.js:101:20)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (C:\Users\andrew.koltyakov\AppData\Roaming\npm\node_modules\npm\node_modules\request\request.js:988:12)
41 verbose statusCode 403
42 verbose pkgid sppull
43 verbose cwd D:\Projects\GitHub\sppull
44 error Windows_NT 10.0.10586
45 error argv "C:\\Program Files\\nodejs\\node.exe" "C:\\Users\\andrew.koltyakov\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error node v6.9.1
47 error npm  v3.10.2
48 error code E403
49 error "You cannot publish over the previously published version 1.1.1." : sppull
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
